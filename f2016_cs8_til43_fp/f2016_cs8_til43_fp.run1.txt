#
#
# name       : Tiantian Liu
# email      : man8@pitt.edu
# date       : 2016/12/09
# class      : CS0008-f2016
# instructor : Max Novelli (man8@pitt.edu)
#
# description:
# A customer needs to process a number of text files (called data files) that contain names and distance run by study participants.
# The format of those files is as follows:
#
# Max ,34.23
# Barbara ,23.00
# Luka ,12.87
# …
#
# In those files, each row is a comma separated list of 2 values: the first one is the name of the participant and the
# second is the distance that the participant has run.
# The names of the input files are stored one per line in an additional file, called the master input list.
# This file has the following structure:
#
# <data file 1>
# <data file 2>
# <data file 3>
# …
#
# Write a program that read the master input list file, retrieves the names of the data files and from each one of them
# reads every line, extract name and distance. Once the program has all the data in memory, it has to compute the following
# quantities and informations:
# - number of files read in input
# - total number of lines read
# - total distance run (aka the sum of all the distances loaded from provided files)
# - total distance run for each individual participant
# - individual maximum distance run and by which participant
# - individual minimum distance run and by which participant
# - report if there are any participants that appears more than once, how many times and their names
# - total number of participants
#
# The program should provide an terminal output similar to the following:
#
#	Number of Input files read   : xx
#	Total number of lines read   : xx
#
#	total distance run           : xxxx.xxxxx
#
#	max distance run             : xxxx.xxxxx
#	  by participant             : participant name
#
#	min distance run             : xxxx.xxxxx
#	  by participant             : participant name
#
# in this program, students should make the best use of everything that has learn so far in this class, she
# or he has to use a class named participants that has 2 properties:
# name; distance; runs;
# and at least, the following methods:
# addDistance(d): add single distance to the distance accumulator and increments runs by 1, argumentd is
#                   a single float.
# addDistances(ld): add an array of distances to distance accumulator. Argument ld is a list of floats.
# getDistance(): get the current value of the distance accumulator
# getName(): get the name of the participant of the current instance
# __init__(n,d=0): initializer method. Set name and initial distance if provided. if initial distance is not
#                   specified, it should be set to 0
# __str__(): stringify method. Returns a string with name, total distance run and how many distances the
#               object added, according to the following format:
# Name : xxxxxxxxxxxxxxxxxxx. Distance run : yyyy.yyyy. Runs : zzzz
# where xxxxxxxxxxxxxxxxxxx is a right align string of 20 characters for the name, yyyy.yyyy is the total
# distance tun with 9 digits, decima point and 4 decimals, and zzzz is the number of runs with 4 digits,
# no decimals.

# start the program with the class
class Participant:
    # initialize the properties
    def __init__(self,name,distance):
#       #set name
        self.name = 'name'

#       set distance and runs
        if distance > 0:
            self.distance = distance
            self.runs = 1
        else:
            self.distance = 0
            self.runs = 0
    # def __init__ ends
#
    # addDistance(d) method
    def addDistance(self,distance):
        if distance > 0:
            self.distance = distance
            self.runs +=1
    # end def addDistance

    # addDistances(ld) method
    def addDistances(self,distances):
        for distance in distances:
            if distance > 0:
                self.distance += distance
                self.runs += 1
    # end def addDistances

    # getDistance method
    def getDistance(self):
        return self.distance
    # end def getDistance

    # getName
    def getName(self):
        return self.name
    # end def gerName

    # getRuns
    def getRuns(self):
        return self.runs

    # __str__method
    def __str__(self):
        return \
            "Name : " + format(self.name, '>20s') + \
            ". Distance run : " + format(self.distance, '9.4f') + \
            ". Runs : " + format(self.runs, '4d')




# printKV function
def printKV(key, value, klen=0):
    formkey = '{:<30}'. format(key)
    formvalue = 0

    #test the type of value and assign format accordingly.
    if isinstance(value, str):
        formvalue = '{:<40}'.format(value)
    elif isinstance(value,float):
        formvalue = '{:<40.5f}'.format(value)
    elif isinstance(value, int):
        formvalue = '{:<40}'.format(value)

    print(formkey, ':', formvalue)


# ask the users for master file
f = input('type in the name of the master file')
# put files to be read in a file list
masterFile = open(f, 'r')
fileList = []
# initiate the total distances
totalDistance = 0
# create an empty list
data=[]
# initiate the total number of files read
totalnumFile = 0
# loop and read filenames to a list
for filename in masterFile:
    totalnumFile += 1
    fileList.append(filename.rstrip('\n'))

# loop through all three files and append all data to data list
for file in fileList:
    files = open(file, 'r')
    # append all datas to the data list
    for line in files:
        data.append(line.rstrip('\n').split(','))
    # end for
# end for

# the number of total lines read
totalLines = len(data)
# total distances run

# get the total distance
for items in data:
    if items[1] != 'distance':
        totalDistance += float(items[1])
# end for

# create a dictionary
participant = {}


# loop through all the datas and build the dictionary
for item in data:
    # exclude 'name' and 'distance' in the dictionary
    if item[0] != 'name' and item[1] != 'distance':
        distance = float(item[1])
        name = str(item[0])
        # check if the name appears the first time
        if name not in participant.keys():
            participant[name] = Participant(name,distance)
            participant[name].addDistance(distance)

(# I thought the problem may be that I failed to add distances to the participants that have multiple runs? I tried the participant.setdefault method, and participant.update method, but it showed ‘Participant(which is the name of my class) has no attribute ’setdefault’ ’ and ‘update’ method.
so I think the way of adding instances to the class is not right, but I don’t know where went wrong.)


# get the list of participant with multiple runs (I don't know where went wrong)
multiplerun = []
for item in participant.values():
    if item.getRuns() > 1:
        multiplerun.append(item)
sumpeoplewithmultiruns = len(multiplerun)

# end for
(# I thought the problem was in the definition of the class, maybe I forgot to initiate 
the runs, but I checked it, I don’t know why all runs are equal to 2 now)

# total number of participants
totalParticipants = len(participant)

# initiate the minimum distance, maximum distance and the names of them
min = {'name': None, 'distance': None}
max = {'name': None, 'distance': None}

# for convenience, use more distinguishable variable to represent name and distance
minName = min['name']
maxName = max['distance']
minDistance = min['distance']
maxDistance = max['distance']
# create an empty dictionary for the runs
runs = {}


# loop through the dictionary and get the max and min
for name, object in participant.items():

    Distance = object.getDistance()

    if (minDistance is None) or (minDistance > Distance):
        minDistance = Distance
        minName = name
    if (maxDistance is None) or (maxDistance < Distance):
        maxDistance = Distance
        maxName = name

    # how many times has a participant run
    run = object.getRuns()

    if run not in runs.keys():
        runs[run] = []
        runs[run].append(name)
# close the file
file.close()



printKV('Number of Input files read', totalnumFile)
printKV('Total number of lines read', totalLines)
print('')
printKV('total distance run', totalDistance)
print('')
printKV('max distance run', maxDistance)
printKV('   by participant', maxName)
print('')
printKV('min distance run', minDistance)
printKV('   by participant', minName)
print('')
printKV('Total number of participants', totalParticipants)
printKV('Number of participants '
        'with multiple records', sumpeoplewithmultiruns)



# write all data into the output file
outputfile = open('f2016_cs8_til43_fp_data_output.csv','w')
outputfile.write('name,records,distance\n')

for name, item in participant.items():
    outputfile.write(str(name)+','+str(item.getRuns())+ ','+str(item.getDistance())+ '\n')

outputfile.close()


/Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5 /Users/liutiantian/Documents/CS0008/CS0008-f2016/f2016_cs8_til43_fp/f2016_cs8_til43_fp.py
Number of Input files read     : 3                                       
Total number of lines read     : 453                                     

total distance run             : 23222.95595                             

max distance run               : 99.91761                                
   by participant              : Roland                                  

min distance run               : 0.05789                                 
   by participant              : Alex                                    

Total number of participants   : 388                                     
Number of participants with multiple records : 388                                     

Process finished with exit code 0
# I don’t know if i mess up the lists and dictionary somewhere, but I tried to change them
several times, it doesn’t work. I feel blind lol







